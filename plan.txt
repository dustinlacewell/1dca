# Plan for Decoupling Rendering from Core Logic

## Current Architecture
- Canvas.tsx handles all rendering logic directly using Canvas2D API
- State management in useStore.ts contains both simulation and rendering-related state
- No abstraction between rendering and core simulation logic

## Decoupling Plan

### Phase 1: Create Renderer Interface and Canvas Implementation
1. Create a new `src/renderers` directory
2. Define base renderer interface in `src/renderers/BaseRenderer.ts`
   - Core methods:
     - initialize(canvas: HTMLCanvasElement): void
     - render(state: CellState): void  // Takes entire state, not individual cells
     - resize(width: number, height: number): void
     - updateViewport(options: ViewportOptions): void
   - Shared types:
     - CellState (cells data, generation count)
     - ViewportOptions (cell size, margins, etc)
3. Create Canvas2D implementation in `src/renderers/Canvas2DRenderer.ts`
   - Implement full-frame rendering approach
   - Handle DPI scaling and pixel-perfect alignment
4. Update Canvas.tsx to use Canvas2DRenderer
   - Remove direct canvas manipulation
   - Pass complete state to renderer each frame

### Phase 2: Separate Rendering State
1. Split useStore.ts into two parts:
   - Core simulation state (cells, rules, generation)
   - Rendering state (dimensions, colors, view options)
2. Create separate hooks:
   - useSimulationStore.ts for core logic
   - useRenderStore.ts for render settings
3. Update components to use appropriate stores

### Phase 3: Add WebGL Infrastructure
1. Create WebGL renderer implementation
2. Add renderer factory/selection logic
3. Add GPU capability detection
4. Add renderer switching mechanism

## Implementation Steps

We'll execute this plan phase by phase, with each phase broken down into small, reviewable steps. Let's begin with Phase 1, Step 1:

1. Create renderers directory and base interface
2. Review and iterate on interface design
3. Move forward with subsequent steps based on feedback

Would you like me to proceed with implementing Phase 1, Step 1?
